// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FilterDropdown /> snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FilterDropdown
    callback={[Function]}
    categories={
      Array [
        "test1",
        "test2",
        "test3",
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <DropdownToggle
          aria-haspopup={true}
          caret={true}
          className="btn-block"
          color="secondary"
        >
          Select a Filter
        </DropdownToggle>,
        <DropdownMenu
          className="btn-block"
          flip={true}
          right={true}
          tag="div"
        >
          <DropdownItem
            onClick={[Function]}
            tag="button"
            toggle={true}
          >
            None
          </DropdownItem>
          <DropdownItem
            onClick={[Function]}
            tag="button"
            toggle={true}
          >
            test1
          </DropdownItem>
          <DropdownItem
            onClick={[Function]}
            tag="button"
            toggle={true}
          >
            test2
          </DropdownItem>
          <DropdownItem
            onClick={[Function]}
            tag="button"
            toggle={true}
          >
            test3
          </DropdownItem>
        </DropdownMenu>,
      ],
      "className": "btn-block",
      "isOpen": false,
      "toggle": [Function],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "aria-haspopup": true,
          "caret": true,
          "children": "Select a Filter",
          "className": "btn-block",
          "color": "secondary",
        },
        "ref": null,
        "rendered": "Select a Filter",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <DropdownItem
              onClick={[Function]}
              tag="button"
              toggle={true}
            >
              None
            </DropdownItem>,
            Array [
              <DropdownItem
                onClick={[Function]}
                tag="button"
                toggle={true}
              >
                test1
              </DropdownItem>,
              <DropdownItem
                onClick={[Function]}
                tag="button"
                toggle={true}
              >
                test2
              </DropdownItem>,
              <DropdownItem
                onClick={[Function]}
                tag="button"
                toggle={true}
              >
                test3
              </DropdownItem>,
            ],
          ],
          "className": "btn-block",
          "flip": true,
          "right": true,
          "tag": "div",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "None",
              "onClick": [Function],
              "tag": "button",
              "toggle": true,
            },
            "ref": null,
            "rendered": "None",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "test1",
            "nodeType": "class",
            "props": Object {
              "children": "test1",
              "onClick": [Function],
              "tag": "button",
              "toggle": true,
            },
            "ref": null,
            "rendered": "test1",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "test2",
            "nodeType": "class",
            "props": Object {
              "children": "test2",
              "onClick": [Function],
              "tag": "button",
              "toggle": true,
            },
            "ref": null,
            "rendered": "test2",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "test3",
            "nodeType": "class",
            "props": Object {
              "children": "test3",
              "onClick": [Function],
              "tag": "button",
              "toggle": true,
            },
            "ref": null,
            "rendered": "test3",
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <DropdownToggle
            aria-haspopup={true}
            caret={true}
            className="btn-block"
            color="secondary"
          >
            Select a Filter
          </DropdownToggle>,
          <DropdownMenu
            className="btn-block"
            flip={true}
            right={true}
            tag="div"
          >
            <DropdownItem
              onClick={[Function]}
              tag="button"
              toggle={true}
            >
              None
            </DropdownItem>
            <DropdownItem
              onClick={[Function]}
              tag="button"
              toggle={true}
            >
              test1
            </DropdownItem>
            <DropdownItem
              onClick={[Function]}
              tag="button"
              toggle={true}
            >
              test2
            </DropdownItem>
            <DropdownItem
              onClick={[Function]}
              tag="button"
              toggle={true}
            >
              test3
            </DropdownItem>
          </DropdownMenu>,
        ],
        "className": "btn-block",
        "isOpen": false,
        "toggle": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "aria-haspopup": true,
            "caret": true,
            "children": "Select a Filter",
            "className": "btn-block",
            "color": "secondary",
          },
          "ref": null,
          "rendered": "Select a Filter",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <DropdownItem
                onClick={[Function]}
                tag="button"
                toggle={true}
              >
                None
              </DropdownItem>,
              Array [
                <DropdownItem
                  onClick={[Function]}
                  tag="button"
                  toggle={true}
                >
                  test1
                </DropdownItem>,
                <DropdownItem
                  onClick={[Function]}
                  tag="button"
                  toggle={true}
                >
                  test2
                </DropdownItem>,
                <DropdownItem
                  onClick={[Function]}
                  tag="button"
                  toggle={true}
                >
                  test3
                </DropdownItem>,
              ],
            ],
            "className": "btn-block",
            "flip": true,
            "right": true,
            "tag": "div",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "None",
                "onClick": [Function],
                "tag": "button",
                "toggle": true,
              },
              "ref": null,
              "rendered": "None",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "test1",
              "nodeType": "class",
              "props": Object {
                "children": "test1",
                "onClick": [Function],
                "tag": "button",
                "toggle": true,
              },
              "ref": null,
              "rendered": "test1",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "test2",
              "nodeType": "class",
              "props": Object {
                "children": "test2",
                "onClick": [Function],
                "tag": "button",
                "toggle": true,
              },
              "ref": null,
              "rendered": "test2",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "test3",
              "nodeType": "class",
              "props": Object {
                "children": "test3",
                "onClick": [Function],
                "tag": "button",
                "toggle": true,
              },
              "ref": null,
              "rendered": "test3",
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
